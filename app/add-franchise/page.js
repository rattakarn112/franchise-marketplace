'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { supabase } from '@/lib/supabase'

export default function AddFranchise() {
  const router = useRouter()
  
  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°
  const [formData, setFormData] = useState({
    name: '',
    category: '',
    investmentMin: '',
    investmentMax: '',
    description: '',
    contact: '',
    lineId: '',
    location: '',
    features: []
  })

  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  const [imageFile, setImageFile] = useState(null)
  const [imagePreview, setImagePreview] = useState(null)
  const [uploadingImage, setUploadingImage] = useState(false)

  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  const [showSuccess, setShowSuccess] = useState(false)
  const [errors, setErrors] = useState({})
  const [loading, setLoading] = useState(false)

  // Features ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const availableFeatures = [
    '‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ',
    '‡∏≠‡∏ö‡∏£‡∏°‡∏ü‡∏£‡∏µ',
    '‡∏ä‡πà‡∏ß‡∏¢‡∏´‡∏≤‡∏ó‡∏≥‡πÄ‡∏•',
    '‡∏°‡∏µ‡∏ó‡∏µ‡∏°‡∏ã‡∏±‡∏û‡∏û‡∏≠‡∏£‡πå‡∏ï',
    '‡∏™‡πà‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏´‡πâ',
    'ROI ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1 ‡∏õ‡∏µ'
  ]

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°
  const handleChange = (e) => {
    const { name, value } = e.target
    setFormData(prev => ({
      ...prev,
      [name]: value
    }))
    // ‡∏•‡∏ö error ‡∏Ç‡∏≠‡∏á field ‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }))
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  const handleImageChange = (e) => {
    const file = e.target.files[0]
    if (file) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB)
      if (file.size > 5 * 1024 * 1024) {
        alert('‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB')
        return
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
      if (!file.type.startsWith('image/')) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô')
        return
      }

      setImageFile(file)
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á preview
      const reader = new FileReader()
      reader.onloadend = () => {
        setImagePreview(reader.result)
      }
      reader.readAsDataURL(file)
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  const uploadImage = async () => {
    if (!imageFile) return null

    setUploadingImage(true)
    
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå unique
      const fileExt = imageFile.name.split('.').pop()
      const fileName = `${Date.now()}_${Math.random().toString(36).substring(2)}.${fileExt}`
      const filePath = `franchises/${fileName}`

      // ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Supabase Storage
      const { data, error } = await supabase.storage
        .from('franchise-images')
        .upload(filePath, imageFile)

      if (error) throw error

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á public URL
      const { data: { publicUrl } } = supabase.storage
        .from('franchise-images')
        .getPublicUrl(filePath)

      return publicUrl
    } catch (error) {
      console.error('Error uploading image:', error)
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û')
      return null
    } finally {
      setUploadingImage(false)
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ features
  const handleFeatureToggle = (feature) => {
    setFormData(prev => ({
      ...prev,
      features: prev.features.includes(feature)
        ? prev.features.filter(f => f !== feature)
        : [...prev.features, feature]
    }))
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const validateForm = () => {
    const newErrors = {}
    
    if (!formData.name.trim()) {
      newErrors.name = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ü‡∏£‡∏ô‡πÑ‡∏ä‡∏™‡πå'
    }
    if (!formData.category) {
      newErrors.category = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà'
    }
    if (!formData.investmentMin || !formData.investmentMax) {
      newErrors.investment = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô'
    }
    if (!formData.contact.trim() && !formData.lineId.trim()) {
      newErrors.contact = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ ‡∏´‡∏£‡∏∑‡∏≠ LINE ID ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏≠‡∏¢‡πà‡∏≤‡∏á'
    }
    if (!formData.description.trim()) {
      newErrors.description = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î'
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Supabase
  const handleSubmit = async (e) => {
    e.preventDefault()
    
    if (!validateForm()) {
      return
    }

    setLoading(true)

    try {
      // ‡πÄ‡∏ä‡πá‡∏Ñ user ‡∏Å‡πà‡∏≠‡∏ô
  const { data: { user } } = await supabase.auth.getUser()
  if (!user) {
    alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®')
    router.push('/auth')
    return
  }
      // ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      let imageUrl = null
      if (imageFile) {
        imageUrl = await uploadImage()
      }

      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
      const dataToSave = {
        name: formData.name,
        category: formData.category,
        investment_min: parseInt(formData.investmentMin),
        investment_max: parseInt(formData.investmentMax),
        description: formData.description,
        contact: formData.contact || null,
        line_id: formData.lineId || null,
        location: formData.location || null,
        features: formData.features,
        image_url: imageUrl,
        user_id: user.id
      }

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Supabase
      const { data, error } = await supabase
        .from('franchises')
        .insert([dataToSave])
        .select()

      if (error) throw error

      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      setShowSuccess(true)
      console.log('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', data)
      
      // ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
      setTimeout(() => {
        window.location.href = '/'
      }, 2000)

    } catch (error) {
      console.error('Error:', error)
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message)
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm">
        <div className="container mx-auto px-4 py-4">
          <div className="flex justify-between items-center">
            <h1 className="text-2xl font-bold text-blue-600">üè™ FranHub</h1>
            <button 
              onClick={() => router.push('/')}
              className="text-gray-600 hover:text-gray-800"
            >
              ‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
            </button>
          </div>
        </div>
      </header>

      {/* Form Section */}
      <main className="container mx-auto px-4 py-8">
        <div className="max-w-3xl mx-auto">
          <h2 className="text-3xl font-bold mb-8 text-center">‡∏•‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÅ‡∏ü‡∏£‡∏ô‡πÑ‡∏ä‡∏™‡πå‡∏ü‡∏£‡∏µ</h2>

          {/* Success Message */}
          {showSuccess && (
            <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-6">
              ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å...
            </div>
          )}

          {/* Form */}
          <form onSubmit={handleSubmit} className="bg-white rounded-lg shadow-md p-6 space-y-6">
            {/* ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏ü‡∏£‡∏ô‡πÑ‡∏ä‡∏™‡πå
              </label>
              <div className="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-lg">
                <div className="space-y-1 text-center">
                  {imagePreview ? (
                    <div className="relative">
                      <img 
                        src={imagePreview} 
                        alt="Preview" 
                        className="mx-auto h-32 w-32 object-cover rounded-lg"
                      />
                      <button
                        type="button"
                        onClick={() => {
                          setImageFile(null)
                          setImagePreview(null)
                        }}
                        className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600"
                      >
                        ‚úï
                      </button>
                    </div>
                  ) : (
                    <svg
                      className="mx-auto h-12 w-12 text-gray-400"
                      stroke="currentColor"
                      fill="none"
                      viewBox="0 0 48 48"
                    >
                      <path
                        d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02"
                        strokeWidth={2}
                        strokeLinecap="round"
                        strokeLinejoin="round"
                      />
                    </svg>
                  )}
                  <div className="flex text-sm text-gray-600">
                    <label
                      htmlFor="file-upload"
                      className="relative cursor-pointer bg-white rounded-md font-medium text-blue-600 hover:text-blue-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-blue-500"
                    >
                      <span>{imagePreview ? '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏π‡∏õ' : '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û'}</span>
                      <input
                        id="file-upload"
                        name="file-upload"
                        type="file"
                        className="sr-only"
                        onChange={handleImageChange}
                        accept="image/*"
                      />
                    </label>
                    <p className="pl-1">‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡∏ß‡∏≤‡∏á</p>
                  </div>
                  <p className="text-xs text-gray-500">PNG, JPG ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB</p>
                </div>
              </div>
            </div>

            {/* ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ü‡∏£‡∏ô‡πÑ‡∏ä‡∏™‡πå */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ü‡∏£‡∏ô‡πÑ‡∏ä‡∏™‡πå *
              </label>
              <input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleChange}
                className={`w-full px-3 py-2 border rounded-lg text-black focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                  errors.name ? 'border-red-500' : 'border-gray-300'
                }`}
                placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ä‡∏≤‡πÑ‡∏Ç‡πà‡∏°‡∏∏‡∏Å MoonTea"
              />
              {errors.name && <p className="text-red-500 text-sm mt-1">{errors.name}</p>}
            </div>

            {/* ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà *
              </label>
              <select
                name="category"
                value={formData.category}
                onChange={handleChange}
                className={`w-full px-3 py-2 border rounded-lg text-black focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                  errors.category ? 'border-red-500' : 'border-gray-300'
                }`}
              >
                <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà --</option>
                <option value="‡∏≠‡∏≤‡∏´‡∏≤‡∏£">‡∏≠‡∏≤‡∏´‡∏≤‡∏£</option>
                <option value="‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°">‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°</option>
                <option value="‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£">‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</option>
                <option value="‡∏Ñ‡πâ‡∏≤‡∏õ‡∏•‡∏µ‡∏Å">‡∏Ñ‡πâ‡∏≤‡∏õ‡∏•‡∏µ‡∏Å</option>
                <option value="‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤">‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤</option>
                <option value="‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°">‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°</option>
              </select>
              {errors.category && <p className="text-red-500 text-sm mt-1">{errors.category}</p>}
            </div>

            {/* ‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                ‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô (‡∏ö‡∏≤‡∏ó) *
              </label>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <input
                    type="number"
                    name="investmentMin"
                    value={formData.investmentMin}
                    onChange={handleChange}
                    className={`w-full px-3 py-2 border rounded-lg text-black focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                      errors.investment ? 'border-red-500' : 'border-gray-300'
                    }`}
                    placeholder="‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î"
                  />
                </div>
                <div>
                  <input
                    type="number"
                    name="investmentMax"
                    value={formData.investmentMax}
                    onChange={handleChange}
                    className={`w-full px-3 py-2 border rounded-lg text-black focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                      errors.investment ? 'border-red-500' : 'border-gray-300'
                    }`}
                    placeholder="‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î"
                  />
                </div>
              </div>
              {errors.investment && <p className="text-red-500 text-sm mt-1">{errors.investment}</p>}
            </div>

            {/* ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ü‡∏£‡∏ô‡πÑ‡∏ä‡∏™‡πå *
              </label>
              <textarea
                name="description"
                value={formData.description}
                onChange={handleChange}
                rows="4"
                className={`w-full px-3 py-2 border rounded-lg text-black focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                  errors.description ? 'border-red-500' : 'border-gray-300'
                }`}
                placeholder="‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô ‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏≠‡∏∑‡πà‡∏ô‡πÜ"
              />
              {errors.description && <p className="text-red-500 text-sm mt-1">{errors.description}</p>}
            </div>

            {/* ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
              </label>
              <input
                type="text"
                name="location"
                value={formData.location}
                onChange={handleChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg text-black focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ó‡∏±‡πà‡∏ß‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®, ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏¥‡∏°‡∏ì‡∏ë‡∏•"
              />
            </div>

            {/* Features */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                ‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ü‡∏£‡∏ô‡πÑ‡∏ä‡∏™‡πå
              </label>
              <div className="grid grid-cols-2 gap-3">
                {availableFeatures.map(feature => (
                  <label key={feature} className="flex items-center space-x-2 cursor-pointer">
                    <input
                      type="checkbox"
                      checked={formData.features.includes(feature)}
                      onChange={() => handleFeatureToggle(feature)}
                      className="text-blue-600 rounded"
                    />
                    <span className="text-sm">{feature}</span>
                  </label>
                ))}
              </div>
            </div>

            {/* ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ */}
            <div className="space-y-4">
              <h3 className="font-medium">‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ *</h3>
              <div>
                <label className="block text-sm text-gray-700 mb-1">
                  ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
                </label>
                <input
                  type="text"
                  name="contact"
                  value={formData.contact}
                  onChange={handleChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg text-black focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="08X-XXX-XXXX"
                />
              </div>
              <div>
                <label className="block text-sm text-gray-700 mb-1">
                  LINE ID
                </label>
                <input
                  type="text"
                  name="lineId"
                  value={formData.lineId}
                  onChange={handleChange}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg text-black focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="@yourlineid"
                />
              </div>
              {errors.contact && <p className="text-red-500 text-sm">{errors.contact}</p>}
            </div>

            {/* ‡∏õ‡∏∏‡πà‡∏° Submit */}
            <div className="flex gap-4">
              <button
                type="submit"
                disabled={loading || uploadingImage}
                className={`flex-1 py-3 rounded-lg font-medium ${
                  loading || uploadingImage
                    ? 'bg-gray-400 text-gray-200 cursor-not-allowed' 
                    : 'bg-blue-600 text-white hover:bg-blue-700'
                }`}
              >
                {uploadingImage ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ...' : loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®'}
              </button>
              <button
                type="button"
                onClick={() => router.push('/')}
                className="flex-1 bg-gray-300 text-gray-700 py-3 rounded-lg hover:bg-gray-400 font-medium"
              >
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
            </div>
          </form>
        </div>
      </main>
    </div>
  )
}